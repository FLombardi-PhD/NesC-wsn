#
# This class is automatically generated by mig. DO NOT EDIT THIS FILE.
# This class implements a Python interface to the 'Flooding'
# message type.
#

import tinyos.message.Message

# The default size of this message type in bytes.
DEFAULT_MESSAGE_SIZE = 6

# The Active Message type associated with this message.
AM_TYPE = 6

class Flooding(tinyos.message.Message.Message):
    # Create a new Flooding of size 6.
    def __init__(self, data="", addr=None, gid=None, base_offset=0, data_length=6):
        tinyos.message.Message.Message.__init__(self, data, addr, gid, base_offset, data_length)
        self.amTypeSet(AM_TYPE)
    
    # Get AM_TYPE
    def get_amType(cls):
        return AM_TYPE
    
    get_amType = classmethod(get_amType)
    
    #
    # Return a String representation of this message. Includes the
    # message type name and the non-indexed field values.
    #
    def __str__(self):
        s = "Message <Flooding> \n"
        try:
            s += "  [id=0x%x]\n" % (self.get_id())
        except:
            pass
        try:
            s += "  [seq=0x%x]\n" % (self.get_seq())
        except:
            pass
        try:
            s += "  [message=0x%x]\n" % (self.get_message())
        except:
            pass
        return s

    # Message-type-specific access methods appear below.

    #
    # Accessor methods for field: id
    #   Field type: int
    #   Offset (bits): 0
    #   Size (bits): 16
    #

    #
    # Return whether the field 'id' is signed (False).
    #
    def isSigned_id(self):
        return False
    
    #
    # Return whether the field 'id' is an array (False).
    #
    def isArray_id(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'id'
    #
    def offset_id(self):
        return (0 / 8)
    
    #
    # Return the offset (in bits) of the field 'id'
    #
    def offsetBits_id(self):
        return 0
    
    #
    # Return the value (as a int) of the field 'id'
    #
    def get_id(self):
        return self.getUIntElement(self.offsetBits_id(), 16, 1)
    
    #
    # Set the value of the field 'id'
    #
    def set_id(self, value):
        self.setUIntElement(self.offsetBits_id(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'id'
    #
    def size_id(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'id'
    #
    def sizeBits_id(self):
        return 16
    
    #
    # Accessor methods for field: seq
    #   Field type: int
    #   Offset (bits): 16
    #   Size (bits): 16
    #

    #
    # Return whether the field 'seq' is signed (False).
    #
    def isSigned_seq(self):
        return False
    
    #
    # Return whether the field 'seq' is an array (False).
    #
    def isArray_seq(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'seq'
    #
    def offset_seq(self):
        return (16 / 8)
    
    #
    # Return the offset (in bits) of the field 'seq'
    #
    def offsetBits_seq(self):
        return 16
    
    #
    # Return the value (as a int) of the field 'seq'
    #
    def get_seq(self):
        return self.getUIntElement(self.offsetBits_seq(), 16, 1)
    
    #
    # Set the value of the field 'seq'
    #
    def set_seq(self, value):
        self.setUIntElement(self.offsetBits_seq(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'seq'
    #
    def size_seq(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'seq'
    #
    def sizeBits_seq(self):
        return 16
    
    #
    # Accessor methods for field: message
    #   Field type: int
    #   Offset (bits): 32
    #   Size (bits): 16
    #

    #
    # Return whether the field 'message' is signed (False).
    #
    def isSigned_message(self):
        return False
    
    #
    # Return whether the field 'message' is an array (False).
    #
    def isArray_message(self):
        return False
    
    #
    # Return the offset (in bytes) of the field 'message'
    #
    def offset_message(self):
        return (32 / 8)
    
    #
    # Return the offset (in bits) of the field 'message'
    #
    def offsetBits_message(self):
        return 32
    
    #
    # Return the value (as a int) of the field 'message'
    #
    def get_message(self):
        return self.getUIntElement(self.offsetBits_message(), 16, 1)
    
    #
    # Set the value of the field 'message'
    #
    def set_message(self, value):
        self.setUIntElement(self.offsetBits_message(), 16, value, 1)
    
    #
    # Return the size, in bytes, of the field 'message'
    #
    def size_message(self):
        return (16 / 8)
    
    #
    # Return the size, in bits, of the field 'message'
    #
    def sizeBits_message(self):
        return 16
    
